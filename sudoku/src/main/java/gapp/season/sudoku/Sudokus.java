package gapp.season.sudoku;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 数独的一些例子(81个0-9的数字组成的字符串)
 * 带*表示非唯一解
 */
public class Sudokus {
    private static Sudokus instance;

    private List<String> mSudokuTips;
    private List<String> mSudokuKeys;
    private Map<String, List<String>> mSudokusTipListMap;
    private Map<String, List<String>> mSudokusValueListMap;

    private Sudokus() {
        // 标准数独、X数独、%数独
        mSudokuTips = new ArrayList<>();
        mSudokuKeys = new ArrayList<>();
        mSudokusTipListMap = new HashMap<>();
        mSudokusValueListMap = new HashMap<>();

        mSudokuTips.add("复制当前数独字符串");
        mSudokuKeys.add("copy");
        mSudokuTips.add("数独-粘贴板字符串");
        mSudokuKeys.add("paste");
        mSudokuTips.add("数独-输入字符串");
        mSudokuKeys.add("input");
        mSudokuTips.add("数独-随机生成数独");
        mSudokuKeys.add("generate");

        addSudokus_1();
        addSudokus_2();
        addSudokus_3();
        addSudokus_4();
    }

    private void addSudokus_1() {
        mSudokuTips.add("数独-入门");
        String key = "standard_level_simple";
        List<String> tipList = new ArrayList<>();
        List<String> valueList = new ArrayList<>();
        tipList.add("标准数独-入门-1");
        valueList.add("369052478850674931714308265683927154597416820021835697138769042240583719905241306");
        tipList.add("标准数独-入门-2");
        valueList.add("571983460408627915962105387740219036086374529293850741629038154804502673357461208");
        tipList.add("标准数独-入门-3");
        valueList.add("069084753587019426230607891691470238752831049348962105405196307913728064876543010");
        tipList.add("X数独-入门-1");
        valueList.add("452379860638140507901806402806503279217904385593280140365020914104695703720431658");
        tipList.add("%数独-入门-1");
        valueList.add("302486597968507401574192680839200176720613948041879302203964015197350264456721830");
        //额外列表
        insertSudoku(tipList, valueList, "简单数独-1", "052006000160900004049803620400000800083201590001000002097305240200009056000100970");
        insertSudoku(tipList, valueList, "简单数独-2", "052400100100002030000813025400007010683000597070500002890365000010700006006004970");
        insertSudoku(tipList, valueList, "简单数独-3", "302000089068052734009000000400007000083201590000500002000000200214780350530000908");
        insertSudoku(tipList, valueList, "简单数独-4", "402000007000080420050302006090030050503060708070010060900406030015070000200000809");
        insertSudoku(tipList, valueList, "简单数独-5", "060091080109680405050040106600000200023904710004000003907020030305079602040150070");
        insertSudoku(tipList, valueList, "简单数独-6", "060090380009080405050300106001008200020904010004200900907006030305070600046050070");
        insertSudoku(tipList, valueList, "简单数独-7", "402000380109607400008300106090030004023964710800010060907006500005809602046000809");
        insertSudoku(tipList, valueList, "简单数独-8", "400091000009007425058340190691000000003964700000000963087026530315800600000150009");
        insertSudoku(tipList, valueList, "简单数独-9", "380001004002600070000487003000040239201000406495060000600854000070006800800700092");
        insertSudoku(tipList, valueList, "简单数独-10", "007520060002009008006407000768005009031000450400300781000804300100200800050013600");
        insertSudoku(tipList, valueList, "简单数独-11", "380000000540009078000407503000145209000908000405362000609804000170200045000000092");
        insertSudoku(tipList, valueList, "简单数独-12", "007001000540609078900487000760100230230000056095002081000854007170206045000700600");
        insertSudoku(tipList, valueList, "简单数独-13", "007021900502009078006407500000140039031908450490062000009804300170200805004710600");
        insertSudoku(tipList, valueList, "简单数独-14", "086500204407008090350009000009080601010000080608090300000200076030800409105004820");
        insertSudoku(tipList, valueList, "简单数独-15", "086507000007360100000000068249003050500000007070100342890000000002056400000904820");
        insertSudoku(tipList, valueList, "简单数独-16", "000007230420368000050029768000080650000602000078090000894230070000856019065900000");
        insertSudoku(tipList, valueList, "简单数独-17", "906000200400368190350400000209080051013040980670090302000001076032856009005000803");
        insertSudoku(tipList, valueList, "简单数独-18", "095002000700804001810076500476000302000000000301000857003290075500307006000400130");
        insertSudoku(tipList, valueList, "简单数独-19", "005002740002850901810000500070501302008723600301609050003000075509017200087400100");
        insertSudoku(tipList, valueList, "简单数独-20", "605102740732004001000000020400501300008020600001609007060000000500300286087405109");
        insertSudoku(tipList, valueList, "简单数独-21", "695102040700800000000970023076000090900020004020000850160098000000007006080405139");
        insertSudoku(tipList, valueList, "简单数独-22", "090002748000004901800906500470500090008000600020009057003208005509300000287400030");
        insertSudoku(tipList, valueList, "简单数独-23", "001009048089070030003106005390000500058602170007000094900708300030040860870300400");
        insertSudoku(tipList, valueList, "简单数独-24", "600039708000004600000100025002017506408000103107850200910008000005900000806320009");
        insertSudoku(tipList, valueList, "简单数独-25", "620500700500270631040100005302000086000090000160000204900008050235041007006005019");
        insertSudoku(tipList, valueList, "简单数独-26", "080130002140902007273080000000070206007203900502040000000060318600308024400021050");
        insertSudoku(tipList, valueList, "简单数独-27", "980100402046950000200684001010009086007000900590800070700465008000098720408001059");
        insertSudoku(tipList, valueList, "简单数独-28", "085100400000950007073684001010070080067203940090040070700465310600098000008001650");
        insertSudoku(tipList, valueList, "简单数独-29", "085100460146000807070004001300009080067000940090800003700400010601000724038001650");
        insertSudoku(tipList, valueList, "简单数独-30", "085130462006000007270680090000009200060213040002800000020065018600000700438021650");
        mSudokuKeys.add(key);
        mSudokusTipListMap.put(key, tipList);
        mSudokusValueListMap.put(key, valueList);
    }

    private void addSudokus_2() {
        mSudokuTips.add("数独-中等");
        String key = "standard_level_medium";
        List<String> tipList = new ArrayList<>();
        List<String> valueList = new ArrayList<>();
        tipList.add("标准数独-中等-1");
        valueList.add("509004010600802005040300607004007900060920030900040070050010003090085020001200400");
        tipList.add("标准数独-中等-2");
        valueList.add("070016090000000000090730060032000007900420103000001009300800000805097001700000580");
        tipList.add("标准数独-中等-3");
        valueList.add("800400520005901600063007004300040200020300040700092006900510002040009080007080005");
        tipList.add("标准数独-中等-4");
        valueList.add("026100400507634102001005970000056219000001000000000703309000000000500000165240000");
        tipList.add("标准数独-中等-5 *");
        valueList.add("006850009002601500500074200300060000020310000840709600009007036000593070000080005");
        tipList.add("标准数独-中等-6");
        valueList.add("600000002040806030100000007091602700080190200502300000000004305005039020009508170");
        tipList.add("标准数独-中等-7");
        valueList.add("010500003095000270700001060600050080000009000830600105908005046000700000060030002");
        tipList.add("标准数独-中等-8");
        valueList.add("030040700690708034001090050300060517000000006060502090010903070900000000853020001");
        tipList.add("标准数独-中等-9");
        valueList.add("000000076680000054530000000059086000106003000000002409403200000000700503000630840");
        tipList.add("标准数独-中等-10");
        valueList.add("000000548500000002847000000000025009010089304050000800209000010005810060100790000");
        tipList.add("标准数独-中等-11 *");
        valueList.add("007000900200507006080104070040010030601000809090080060050809010010603002006000300");
        tipList.add("标准数独-中等-12");
        valueList.add("070103060050000070300050001500304008407000102900702004200070003030000040060509020");
        tipList.add("标准数独-中等-13");
        valueList.add("000013400080006950650000000960201000100070002000304016000000079025800040009760000");
        tipList.add("标准数独-中等-14");
        valueList.add("001090270009002050200003000300014002080000040100280005000900007010300900046070500");
        tipList.add("标准数独-中等-15");
        valueList.add("000409000080020700020507106300800060760000031010006002205908040009070010000605000");
        tipList.add("标准数独-中等-16");
        valueList.add("000000945006000000520103807090310000003080100000046020705208019000000300861000000");
        tipList.add("标准数独-中等-17");
        valueList.add("200700050000048006000002309900600240070020080025001003804900000600480000090003008");
        tipList.add("标准数独-中等-18");
        valueList.add("065000300200067900040300001006050004000402000700080100600004010008570006001000830");
        tipList.add("标准数独-中等-19");
        valueList.add("027900000050002084008000207070030006000817000300040020106000800240600010000005640");
        tipList.add("标准数独-中等-20");
        valueList.add("900278100001030249003000000030800000007000500000004030000000300578040900004516007");
        tipList.add("标准数独-中等-21");
        valueList.add("006007009800030100900605030003000018000901000210000600060703001009020004700800500");
        tipList.add("标准数独-中等-22");
        valueList.add("470108029000000000006927100090601030300000004040709080004875300000000000580403097");
        tipList.add("标准数独-中等-23");
        valueList.add("050801090730000054800030001008302100000000000006704500100050009380000012040608030");
        tipList.add("标准数独-中等-24");
        valueList.add("653000700000009000804050003900017300005030800007290005400070206000800000006000157");
        tipList.add("X数独-中等-1 *");
        valueList.add("005100300006803100010007050072030900000080000008040710020400030007300800004008600");
        tipList.add("X数独-中等-2 *");
        valueList.add("098020050006500008000800900001200760000167000057009100002003000700002500060050270");
        tipList.add("X数独-中等-3 *");
        valueList.add("057900000020074068000005007082000005040000030900000240200700000870210050000008720");
        tipList.add("%数独-中等-1 *");
        valueList.add("000895170005000900890043600008609001003578200600104500000950062009000800067381050");
        tipList.add("%数独-中等-2");
        valueList.add("561739000009080160000100009037600008804010206206008310600094000082050600000261834");
        tipList.add("%数独-中等-3 *");
        valueList.add("261000940000090730930604050500000010090348070070000009080407021052010000014000863");
        //额外列表
        insertSudoku(tipList, valueList, "普通数独-1", "916004072800620050500008930060000200000207000005000090097800003080076009450100687");
        insertSudoku(tipList, valueList, "普通数独-2", "000900082063001409908000000000670300046050290007023000000000701704300620630007000");
        insertSudoku(tipList, valueList, "普通数独-3", "035670000400829500080003060020005807800206005301700020040900070002487006000052490");
        insertSudoku(tipList, valueList, "普通数独-4", "030070902470009000009003060024000837007000100351000620040900200000400056708050090");
        insertSudoku(tipList, valueList, "普通数独-5", "084200000930840000057000000600401700400070002005602009000000980000028047000003210");
        insertSudoku(tipList, valueList, "普通数独-6", "007861000008003000560090010100070085000345000630010007050020098000600500000537100");
        insertSudoku(tipList, valueList, "普通数独-7", "040001003000050079560002804100270080082000960030018007306100098470080000800500040");
        insertSudoku(tipList, valueList, "普通数独-8", "000500006000870302270300081000034900793050614008790000920003057506087000300005000");
        insertSudoku(tipList, valueList, "普通数独-9", "000900067090000208460078000320094070700603002010780043000850016501000090670009000");
        insertSudoku(tipList, valueList, "普通数独-10", "024000017000301000300000965201000650000637000093000708539000001000502000840000570");
        insertSudoku(tipList, valueList, "普通数独-11", "200006143004000600607008029100800200003090800005003001830500902006000400942600005");
        insertSudoku(tipList, valueList, "普通数独-12", "504002030900073008670000020000030780005709200047060000050000014100450009060300502");
        insertSudoku(tipList, valueList, "普通数独-13", "580000637000000000603540000090104705010709040807205090000026304000000000468000072");
        insertSudoku(tipList, valueList, "普通数独-14", "000010000900003408670500021000130780015000240047065000750006014102400009000090000");
        insertSudoku(tipList, valueList, "普通数独-15", "780300050956000000002065001003400570600000003025008100200590800000000417030004025");
        insertSudoku(tipList, valueList, "普通数独-16", "200367500500800060300450700090530400080000070003074050001026005030005007002783001");
        insertSudoku(tipList, valueList, "普通数独-17", "801056200000002381900003000350470000008000100000068037000600002687100000004530806");
        insertSudoku(tipList, valueList, "普通数独-18", "300004005841753060000010000003000087098107540750000100000070000030281796200300008");
        insertSudoku(tipList, valueList, "普通数独-19", "000064810040050062009010300003040607008107500704030100006070200430080090017390000");
        insertSudoku(tipList, valueList, "普通数独-20", "000040320000357080000600400357006040600705003080900675008009000090581000064070000");
        insertSudoku(tipList, valueList, "普通数独-21", "905040026026050900030600050350000009009020800100000075010009030003080760560070108");
        insertSudoku(tipList, valueList, "普通数独-22", "010403060030017400200000300070080004092354780500070030003000005008530040050906020");
        insertSudoku(tipList, valueList, "普通数独-23", "605900100000100073071300005009010004046293510700040600200001730160002000008009401");
        insertSudoku(tipList, valueList, "普通数独-24", "049060002800210490100040000000035084008102300630470000000080001084051006700020950");
        insertSudoku(tipList, valueList, "普通数独-25", "067020300003700000920103000402035060300000002010240903000508039000009200008010750");
        insertSudoku(tipList, valueList, "普通数独-26", "050842001004000900800050040600400019007506800430009002080090006001000400500681090");
        insertSudoku(tipList, valueList, "普通数独-27", "000076189000002030009813000025000010083000590070000460000365200010700000536120000");
        insertSudoku(tipList, valueList, "普通数独-28", "080000030400368000350409700000003650003000900078100000004201076000856009060000020");
        insertSudoku(tipList, valueList, "普通数独-29", "000500748589000001700086900302010580000000000067050204004760002200000867876005000");
        insertSudoku(tipList, valueList, "普通数独-30", "021009008000004031740100025000007086058000170160800000910008052230900000800300410");
        mSudokuKeys.add(key);
        mSudokusTipListMap.put(key, tipList);
        mSudokusValueListMap.put(key, valueList);
    }

    private void addSudokus_3() {
        mSudokuTips.add("数独-大师");
        String key = "standard_level_master";
        List<String> tipList = new ArrayList<>();
        List<String> valueList = new ArrayList<>();
        tipList.add("标准数独-大师-1");
        valueList.add("000100260700030000302080400000408001035000940200305000006050709000040008057009000");
        tipList.add("标准数独-大师-2");
        valueList.add("008090000070000280064100309000805900500000001009304000802007560097000010000060700");
        tipList.add("标准数独-大师-3");
        valueList.add("000702000100040007650000094470801062000000000580209013860000075900060008000908000");
        tipList.add("标准数独-大师-4");
        valueList.add("007238000060700050000400002900000867100000003648000005700003000020005030000174900");
        tipList.add("标准数独-大师-5");
        valueList.add("507000009080002170010060004090030000001709300000040060800050020076200090400000608");
        tipList.add("标准数独-大师-6");
        valueList.add("009700000500002709800010006001600405000040000706008200400090008602300004000007900");
        tipList.add("标准数独-大师-7");
        valueList.add("009000064400000000100360072004600009000903000200005400920057008000000005340000600");
        tipList.add("标准数独-大师-8");
        valueList.add("030008005005000807000040900000390400059070210002065000007050000501000700600900020");
        tipList.add("标准数独-大师-9");
        valueList.add("302700009008000045004001300000059000090030060000260000001400200260000100400002503");
        tipList.add("标准数独-大师-10");
        valueList.add("095008000002006700040000005050020007060050020400070080200000040006100300000300250");
        tipList.add("标准数独-大师-11");
        valueList.add("003000400007208500800030007200703004005000800700501009100040002006809700004000900");
        tipList.add("标准数独-大师-12");
        valueList.add("000009752090000000140800009009502006000308000700104500600003025000000010524600000");
        tipList.add("X数独-大师-1 *");
        valueList.add("806305000010070000300010400400000860000761000063000007001050009000080030000902604");
        tipList.add("X数独-大师-2 *");
        valueList.add("700010200005200300080075000400000080060487050070000003000320090008004600007060004");
        tipList.add("X数独-大师-3 *");
        valueList.add("200007030100025807000130040800000050000000000060000003090082000501370004030900005");
        tipList.add("%数独-大师-1 *");
        valueList.add("900570000000800003350010780010082000500637001000150030039060025200005000000021004");
        tipList.add("%数独-大师-2 *");
        valueList.add("300090006420000800005000700000300000070104050000005000004000200003000067100087009");
        tipList.add("%数独-大师-3 *");
        valueList.add("002700060000064000900003010001000709080307050307000100030800001000140000010000500");
        //额外列表
        insertSudoku(tipList, valueList, "复杂数独-1", "600300100071620000805001000500870901009000600407069008000200807000086410008003002");
        insertSudoku(tipList, valueList, "复杂数独-2", "906013008058000090030000010060800920003409100049006030090000080010000670400960301");
        insertSudoku(tipList, valueList, "复杂数独-3", "300060250000500103005210486000380500030000040002045000413052700807004000056070004");
        insertSudoku(tipList, valueList, "复杂数独-4", "060001907100007230080000406018002004070040090900100780607000040051600009809300020");
        insertSudoku(tipList, valueList, "复杂数独-5", "600300208400185000000000450000070835030508020958010000069000000000631002304009006");
        insertSudoku(tipList, valueList, "复杂数独-6", "400030090200001600760800001500318000032000510000592008900003045001700006040020003");
        insertSudoku(tipList, valueList, "复杂数独-7", "004090170900070002007204000043000050798406213060000890000709400600040001085030700");
        insertSudoku(tipList, valueList, "复杂数独-8", "680001003007004000000820000870009204040302080203400096000036000000500400700200065");
        insertSudoku(tipList, valueList, "复杂数独-9", "000002000103400005200050401340005090807000304090300017605030009400008702000100000");
        insertSudoku(tipList, valueList, "复杂数独-10", "050702003073480005000050400040000200027090350006000010005030000400068730700109060");
        insertSudoku(tipList, valueList, "复杂数独-11", "500080020007502801002900040024000308000324000306000470090006700703208900060090005");
        insertSudoku(tipList, valueList, "复杂数独-12", "108090000200308096090000400406009030010205060080600201001000040360904007000060305");
        insertSudoku(tipList, valueList, "复杂数独-13", "010008570607050009052170000001003706070000040803700900000017260100020407024300090");
        insertSudoku(tipList, valueList, "复杂数独-14", "020439800080000001003001520050092703000000000309740080071300900600000030008924010");
        insertSudoku(tipList, valueList, "复杂数独-15", "000500201800006005005207080017960804000000000908074610080405300700600009504009000");
        insertSudoku(tipList, valueList, "复杂数独-16", "920000000500870000038091000052930160090000030073064980000410250000053001000000073");
        insertSudoku(tipList, valueList, "复杂数独-17", "590006010001254709000001400003715008100000004200648100002500000708463900050100047");
        insertSudoku(tipList, valueList, "复杂数独-18", "309870004000005008870400000104580003000706000700034105000009081900300000400057206");
        insertSudoku(tipList, valueList, "复杂数独-19", "800200000910300706000007002084000009095104860100000230500600000609003071000005008");
        insertSudoku(tipList, valueList, "复杂数独-20", "005037001000050627600002530020070000001968200000010090013700008486090000700840100");
        insertSudoku(tipList, valueList, "复杂数独-21", "090350700000800029000402008710000000463508297000000051300204000940005000008037040");
        insertSudoku(tipList, valueList, "复杂数独-22", "000005904080090605006000030030701450008040700074206090060000300801060070309800000");
        insertSudoku(tipList, valueList, "复杂数独-23", "030004087948700500060800009010586720000000000087312050800003070003007865570200090");
        insertSudoku(tipList, valueList, "复杂数独-24", "300687015000030082050000300400300000601050709000004003008000020210040000970521004");
        insertSudoku(tipList, valueList, "复杂数独-25", "702000004030702010400093008000827090007030800080956000300570009020309080600000503");
        insertSudoku(tipList, valueList, "复杂数独-26", "300040057400853060025700000000000430800406001034000000000005690090624003160080002");
        insertSudoku(tipList, valueList, "复杂数独-27", "000260050000005900000380046020094018004000500950810070380021000005700000040058000");
        insertSudoku(tipList, valueList, "复杂数独-28", "062080504008050090700320001000740620000203000027065000200036007040070100803090240");
        insertSudoku(tipList, valueList, "复杂数独-29", "002001000068000003000086090900002086804000102520800009080140000100000920000700500");
        insertSudoku(tipList, valueList, "复杂数独-30", "000030065460950200000086004003070006004090100500010300200140000007065028630020000");
        mSudokuKeys.add(key);
        mSudokusTipListMap.put(key, tipList);
        mSudokusValueListMap.put(key, valueList);
    }

    private void addSudokus_4() {
        mSudokuTips.add("数独-经典");
        String key = "standard_level_classics";
        List<String> tipList = new ArrayList<>();
        List<String> valueList = new ArrayList<>();
        tipList.add("标准数独-经典-1");
        valueList.add("100400800040030009009006050050300000000001600000070002004010900700800004020004080");
        tipList.add("标准数独-经典-2");
        valueList.add("080000001007004020600300700002009000100060008030400000001700600090008005000000040");
        tipList.add("标准数独-经典-3");
        valueList.add("100500400009030000070008005001000030800600500090007008004020010200800600000001002");
        tipList.add("标准数独-经典-4");
        valueList.add("000000070060010004003400200800003050002900700040080009020060007000100900700008060");
        tipList.add("标准数独-经典-5");
        valueList.add("100007090030020008009600500005300900010080002600004000300000010040000007007000300");
        mSudokuKeys.add(key);
        mSudokusTipListMap.put(key, tipList);
        mSudokusValueListMap.put(key, valueList);
    }

    private void insertSudoku(List<String> tipList, List<String> valueList, String title, String value) {
        tipList.add(title);
        valueList.add(value);
    }

    public static Sudokus getInstance() {
        if (instance == null) {
            instance = new Sudokus();
        }
        return instance;
    }

    public String[] getSudokuTipArray() {
        String[] ss = new String[mSudokuTips.size()];
        for (int i = 0; i < mSudokuTips.size(); i++) {
            ss[i] = mSudokuTips.get(i);
        }
        return ss;
    }

    public List<String> getSudokuTips() {
        return mSudokuTips;
    }

    public List<String> getSudokuKeys() {
        return mSudokuKeys;
    }

    public String[] getSudokusTipArray(String key) {
        List<String> tipList = getSudokusTipList(key);
        String[] ss = new String[tipList.size()];
        for (int i = 0; i < tipList.size(); i++) {
            ss[i] = tipList.get(i);
        }
        return ss;
    }

    public List<String> getSudokusTipList(String key) {
        return mSudokusTipListMap.get(key);
    }

    public List<String> getSudokusValueList(String key) {
        return mSudokusValueListMap.get(key);
    }
}
